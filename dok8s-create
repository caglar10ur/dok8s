#!/bin/bash

set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# run 'doctl compute region list' for a list of available regions
REGION=${REGION:-nyc3}

# name of the master
MASTER_NAME=${MASTER_NAME:-master}
NODE_NAME=${NODE_NAME:-node}

# master/node sizes
MASTER_SIZE=${MASTER_SIZE:-s-2vcpu-2gb}
NODE_SIZE=${NODE_SIZE:-s-2vcpu-4gb}

NODE_COUNT=${NODE_COUNT:-3}

API_ENDPOINT=${API_ENDPOINT:-https://api.digitalocean.com/}

command_exists () {
    type "$1" &> /dev/null;
}

TEMP_DIR=$(mktemp -d)
# deletes the temp directory
function cleanup {
    rm -rf "$TEMP_DIR"
}
# register the cleanup function to be called on the EXIT signal
trap cleanup EXIT

# check doctl
if ! command_exists doctl; then
    echo "Please install doctl: https://github.com/digitalocean/doctl"
    exit 1
fi

# check kubectl
if ! command_exists kubectl; then
    echo "Please install kubectl: https://kubernetes.io/docs/tasks/tools/install-kubectl/"
    exit 1
fi

# generate k8s specific ssh keys
if [ ! -f ~/.ssh/k8s/id_rsa ]; then
    mkdir -p ~/.ssh/k8s/
    ssh-keygen -t rsa -b 4096 -C "k8s" -f ~/.ssh/k8s/id_rsa -N '' > /dev/null

    # import the new ssh key
    doctl -u "${API_ENDPOINT}" compute ssh-key import k8s-ssh --public-key-file ~/.ssh/k8s/id_rsa.pub
fi

SSH_ID=$(doctl -u "${API_ENDPOINT}" compute ssh-key list | grep "k8s-ssh" | cut -d' ' -f1)
SSH_KEY=$(doctl -u "${API_ENDPOINT}" compute ssh-key get "${SSH_ID}" --format FingerPrint --no-header)

# create tags
doctl -u "${API_ENDPOINT}" compute tag create k8s-master > /dev/null
doctl -u "${API_ENDPOINT}" compute tag create k8s-node > /dev/null

# Generate token and insert into the script files
TOKEN6=$(env LC_CTYPE=C tr -dc 'a-z0-9' < /dev/urandom | fold -w "${1:-6}" | head -n 1)
TOKEN16=$(env LC_CTYPE=C tr -dc 'a-z0-9' < /dev/urandom | fold -w "${1:-16}" | head -n 1)
TOKEN="${TOKEN6}"."${TOKEN16}"

# update the master.sh/node.sh with TOKEN
sed -e "s/^TOKEN=.*/TOKEN=${TOKEN}/; s/^DIGITALOCEAN_ACCESS_TOKEN=.*/DIGITALOCEAN_ACCESS_TOKEN=${DIGITALOCEAN_ACCESS_TOKEN}/" "${DIR}"/templates/master.sh.template > "${TEMP_DIR}"/master.sh
sed -e "s/^TOKEN=.*/TOKEN=${TOKEN}/" "${DIR}"/templates/node.sh.template > "${TEMP_DIR}"/node.sh

echo "- Creating the ${MASTER_NAME}"

# create the master
doctl -u "${API_ENDPOINT}" compute droplet create "${MASTER_NAME}" \
    --region "${REGION}" \
    --image ubuntu-16-04-x64 \
    --size "${MASTER_SIZE}" \
    --tag-name k8s-master \
    --ssh-keys "${SSH_KEY}" \
    --enable-private-networking \
    --enable-ipv6 \
    --enable-monitoring \
    --user-data-file "${TEMP_DIR}"/master.sh \
    --wait > /dev/null

# get the public/private ips of the master
MASTER_ID=$(doctl -u "${API_ENDPOINT}" compute droplet list | grep "${MASTER_NAME}" |cut -d' ' -f1)
PUBLIC_IP=$(doctl -u "${API_ENDPOINT}" compute droplet get "${MASTER_ID}" --format PublicIPv4 --no-header)
PRIVATE_IP=$(doctl -u "${API_ENDPOINT}" compute droplet get "${MASTER_ID}" --format PrivateIPv4 --no-header)

echo "- Waiting master to finish installation"

# wait till we get admin.conf
while ! scp -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ~/.ssh/k8s/id_rsa root@"${PUBLIC_IP}":/etc/kubernetes/admin.conf . 2> /dev/null; do
    sleep 10
done

KUBECONFIG=$(pwd)/admin.conf
export KUBECONFIG

# update the node.sh with MASTER_IP
sed -i.bak "s/^MASTER_IP=.*/MASTER_IP=${PRIVATE_IP}/" "${TEMP_DIR}"/node.sh

echo "- Creating nodes"

nodes=()
for i in $(seq "${NODE_COUNT}"); do
    nodes+=("${NODE_NAME}""$i")
done

# join the nodes to the cluster
doctl -u "${API_ENDPOINT}" compute droplet create "${nodes[@]}" \
    --region "${REGION}" \
    --image ubuntu-16-04-x64 \
    --size "${NODE_SIZE}" \
    --tag-name k8s-node \
    --ssh-keys "${SSH_KEY}" \
    --enable-private-networking \
    --enable-ipv6 \
    --enable-monitoring \
    --user-data-file "${TEMP_DIR}"/node.sh \
    --wait > /dev/null

echo "- Waiting nodes to be ready"
# wait till nodes are ready
until [ "$(kubectl get nodes 2> /dev/null | grep -v master | grep -c Ready | xargs)" == "${NODE_COUNT}" ]
do
    sleep 10
done

kubectl create -f manifests/metrics-server > /dev/null

kubectl create namespace monitoring > /dev/null
kubectl create -n monitoring -f manifests/prometheus > /dev/null
kubectl create -n monitoring -f manifests/node-exporter > /dev/null
kubectl create -n monitoring -f manifests/grafana/ > /dev/null

# set dashboard access to admin
cat <<EOF | kubectl create -f - > /dev/null
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-dashboard
  labels:
    k8s-app: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: kubernetes-dashboard
  namespace: kube-system
EOF

PROMPORT=$(kubectl -n monitoring get svc -o 'go-template={{range .items}}{{range.spec.ports}}{{if and (.nodePort) (eq .targetPort 9090.0)}}{{.nodePort}}{{"\n"}}{{end}}{{end}}{{end}}')
GRAFPORT=$(kubectl -n monitoring get svc -o 'go-template={{range .items}}{{range.spec.ports}}{{if and (.nodePort) (eq .targetPort 3000.0)}}{{.nodePort}}{{"\n"}}{{end}}{{end}}{{end}}')

echo "- Creating the master firewall"
doctl -u "${API_ENDPOINT}" compute firewall create \
    --name k8s-master \
    --inbound-rules "protocol:tcp,ports:all,tag:k8s-node protocol:udp,ports:all,tag:k8s-node protocol:tcp,ports:22,address:0.0.0.0/0,address:::/0 protocol:tcp,ports:443,address:0.0.0.0/0,address:::/0" \
    --outbound-rules "protocol:icmp,address:0.0.0.0/0,address:::/0 protocol:tcp,ports:all,address:0.0.0.0/0,address:::/0 protocol:udp,ports:all,address:0.0.0.0/0,address:::/0" \
    --tag-names k8s-master > /dev/null


echo "- Creating the node firewall"
doctl -u "${API_ENDPOINT}" compute firewall create \
    --name k8s-nodes \
    --inbound-rules "protocol:tcp,ports:all,tag:k8s-master protocol:udp,ports:all,tag:k8s-master protocol:tcp,ports:all,tag:k8s-node protocol:udp,ports:all,tag:k8s-node protocol:tcp,ports:22,address:0.0.0.0/0,address:::/0 protocol:tcp,ports:${PROMPORT},address:0.0.0.0/0,address:::/0 protocol:tcp,ports:${GRAFPORT},address:0.0.0.0/0,address:::/0" \
    --outbound-rules "protocol:icmp,address:0.0.0.0/0,address:::/0 protocol:tcp,ports:all,address:0.0.0.0/0,address:::/0 protocol:udp,ports:all,address:0.0.0.0/0,address:::/0" \
    --tag-names k8s-node > /dev/null

echo "- Installation completed"

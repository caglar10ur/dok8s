#!/bin/bash

# Specify the Kubernetes version to use.
KUBERNETES_VERSION="1.14.1"
KUBERNETES_CNI="0.7.5"
DOCKER_VERSION="5:18.09.3~3-0~ubuntu-bionic"

KUBECTL_FLAGS="--kubeconfig /etc/kubernetes/admin.conf"
KUBECTL="kubectl ${KUBECTL_FLAGS}"

TOKEN=TOKEN
DIGITALOCEAN_ACCESS_TOKEN=DIGITALOCEAN_ACCESS_TOKEN

# k8s apt repo
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF

# docker apt repo
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

cat <<EOF > /etc/apt/sources.list.d/docker.list
deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
EOF

# update/install packages
export DEBIAN_FRONTEND=noninteractive
apt-get update -y
apt-get -yq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade
apt-get install -y \
    docker-ce=${DOCKER_VERSION} \
    kubelet=${KUBERNETES_VERSION}-00 \
    kubeadm=${KUBERNETES_VERSION}-00 \
    kubernetes-cni=${KUBERNETES_CNI}-00

apt -y autoremove

HOSTNAME=$(curl -s http://169.254.169.254/metadata/v1/hostname)
PUBLIC_IP=$(curl -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)
PRIVATE_IP=$(curl -s http://169.254.169.254/metadata/v1/interfaces/private/0/ipv4/address)

# https://kubernetes.io/docs/setup/cri/
cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

mkdir -p /etc/systemd/system/docker.service.d

systemctl daemon-reload
systemctl enable docker
systemctl restart docker

# Specify node IP for kubelet.
echo "KUBELET_EXTRA_ARGS=--node-ip=${PRIVATE_IP} --cloud-provider=external --feature-gates=AdvancedAuditing=true,VolumeSnapshotDataSource=true,KubeletPluginsWatcher=true,CSINodeInfo=true,CSIDriverRegistry=true,BlockVolume=true,CSIBlockVolume=true" > /etc/default/kubelet
systemctl daemon-reload
systemctl restart kubelet

cat << EOF >  "/etc/kubeadm.config.yaml"
apiVersion: kubeadm.k8s.io/v1beta1
localAPIEndpoint:
  advertiseAddress: ${PUBLIC_IP}
  bindPort: 443
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: ${TOKEN}
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
nodeRegistration:
  criSocket: /var/run/dockershim.sock
  name: ${HOSTNAME}
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
---
apiVersion: kubeadm.k8s.io/v1beta1
apiServer:
  certSANs:
  - ${PUBLIC_IP}
  - ${PRIVATE_IP}
  - ${HOSTNAME}
  extraArgs:
    kubelet-preferred-address-types: InternalIP,ExternalIP,Hostname
    runtime-config: api/all=true
    authorization-mode: "Node,RBAC"
controllerManager:
  extraArgs:
    horizontal-pod-autoscaler-sync-period: 10s
    horizontal-pod-autoscaler-use-rest-clients: "true"
    node-monitor-grace-period: 10s
certificatesDir: /etc/kubernetes/pki
clusterName: dok8su
imageRepository: k8s.gcr.io
kind: ClusterConfiguration
kubernetesVersion: v${KUBERNETES_VERSION}
networking:
  dnsDomain: cluster.local
  podSubnet: "10.10.0.0/16"
  serviceSubnet: 10.96.0.0/12
EOF

# Initialize cluster
kubeadm reset --force
kubeadm init --config /etc/kubeadm.config.yaml

# cilium
${KUBECTL} apply -f https://raw.githubusercontent.com/cilium/cilium/v1.4/examples/kubernetes/1.13/cilium.yaml

# DO secret
${KUBECTL} -n kube-system create secret generic digitalocean --from-literal=access-token=${DIGITALOCEAN_ACCESS_TOKEN}

# DigitalOcean Cloud-Manager
${KUBECTL} apply -f https://raw.githubusercontent.com/digitalocean/digitalocean-cloud-controller-manager/master/releases/v0.1.13.yml

# A Container Storage Interface (CSI) Driver for DigitalOcean Block Storage
${KUBECTL} apply -f https://raw.githubusercontent.com/digitalocean/csi-digitalocean/master/deploy/kubernetes/releases/csi-digitalocean-v1.0.0.yaml

# dashboard
${KUBECTL} create -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml

# setup for root user
mkdir -p ~/.kube
cp /etc/kubernetes/admin.conf ~/.kube/config

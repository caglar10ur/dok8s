#!/bin/bash

# Specify the Kubernetes version to use.
KUBERNETES_VERSION="1.12.2"
KUBERNETES_CNI="0.6.0"
DOCKER_VERSION="18.06.0~ce~3-0~ubuntu"

TOKEN=TOKEN
DIGITALOCEAN_ACCESS_TOKEN=DIGITALOCEAN_ACCESS_TOKEN

# k8s apt repo
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF

# docker apt repo
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

cat <<EOF > /etc/apt/sources.list.d/docker.list
deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
EOF

# update/install packages
export DEBIAN_FRONTEND=noninteractive
apt-get update -y
apt-get -yq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade
apt-get install -y \
    docker-ce=${DOCKER_VERSION} \
    kubelet=${KUBERNETES_VERSION}-00 \
    kubeadm=${KUBERNETES_VERSION}-00 \
    kubernetes-cni=${KUBERNETES_CNI}-00

HOSTNAME=$(curl -s http://169.254.169.254/metadata/v1/hostname)
PUBLIC_IP=$(curl -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)
PRIVATE_IP=$(curl -s http://169.254.169.254/metadata/v1/interfaces/private/0/ipv4/address)

# Enable and start Docker.
systemctl enable docker
systemctl start docker

# Specify node IP for kubelet.
echo "KUBELET_EXTRA_ARGS=--node-ip=${PRIVATE_IP} --cloud-provider=external" > /etc/default/kubelet
systemctl daemon-reload
systemctl restart kubelet

cat << EOF >  "/etc/kubeadm.config.yaml"
apiEndpoint:
  advertiseAddress: ${PUBLIC_IP}
  bindPort: 443
apiVersion: kubeadm.k8s.io/v1alpha3
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: ${TOKEN}
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
nodeRegistration:
  criSocket: /var/run/dockershim.sock
  name: ${HOSTNAME}
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
---
apiServerCertSANs:
- ${PUBLIC_IP}
- ${PRIVATE_IP}
- ${HOSTNAME}
apiServerExtraArgs:
  kubelet-preferred-address-types: InternalIP,ExternalIP,Hostname
authorizationModes:
- Node
- RBAC
apiServerExtraArgs:
  runtime-config: api/all=true
apiVersion: kubeadm.k8s.io/v1alpha3
auditPolicy:
  logDir: /var/log/kubernetes/audit
  logMaxAge: 2
  path: ""
certificatesDir: /etc/kubernetes/pki
clusterName: dok8s
controlPlaneEndpoint: ""
controllerManagerExtraArgs:
  horizontal-pod-autoscaler-sync-period: 10s
  horizontal-pod-autoscaler-use-rest-clients: "true"
  node-monitor-grace-period: 10s
etcd:
  local:
    dataDir: /var/lib/etcd
    image: ""
imageRepository: k8s.gcr.io
kind: ClusterConfiguration
kubernetesVersion: v${KUBERNETES_VERSION}
networking:
  dnsDomain: cluster.local
  podSubnet: 10.244.0.0/16
  serviceSubnet: 10.96.0.0/12
unifiedControlPlaneImage: ""
EOF

# Initialize cluster
kubeadm reset --force
kubeadm init --config /etc/kubeadm.config.yaml

# flannel
sysctl net.bridge.bridge-nf-call-iptables=1
#kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml --kubeconfig /etc/kubernetes/admin.conf
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml --kubeconfig /etc/kubernetes/admin.conf

# DO secret
kubectl -n kube-system create secret generic digitalocean --from-literal=access-token=${DIGITALOCEAN_ACCESS_TOKEN} --kubeconfig /etc/kubernetes/admin.conf

# DigitalOcean Cloud-Manager
kubectl apply -f https://raw.githubusercontent.com/digitalocean/digitalocean-cloud-controller-manager/master/releases/v0.1.8.yml --kubeconfig /etc/kubernetes/admin.conf

# A Container Storage Interface (CSI) Driver for DigitalOcean Block Storage
kubectl apply -f https://raw.githubusercontent.com/digitalocean/csi-digitalocean/master/deploy/kubernetes/releases/csi-digitalocean-v0.3.1.yaml --kubeconfig /etc/kubernetes/admin.conf

# dashboard
kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml --kubeconfig /etc/kubernetes/admin.conf

# setup for root user
mkdir -p ~/.kube
cp /etc/kubernetes/admin.conf ~/.kube/config

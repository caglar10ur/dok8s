#!/bin/bash

set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# run 'doctl compute region list' for a list of available regions
REGION=${REGION:-nyc3}

# name of the master
MASTER_NAME=${MASTER_NAME:-master}
NODE_NAME=${NODE_NAME:-node}

# master/node sizes
MASTER_SIZE=${MASTER_SIZE:-s-2vcpu-2gb}
NODE_SIZE=${NODE_SIZE:-s-2vcpu-4gb}

NODE_COUNT=${NODE_COUNT:-3}

API_ENDPOINT=${API_ENDPOINT:-https://api.digitalocean.com/}

TAG_PREFIX=${TAG_PREFIX:-k8s}

command_exists () {
    type "$1" &> /dev/null;
}

TEMP_DIR=$(mktemp -d)
# deletes the temp directory
function cleanup {
    rm -rf "$TEMP_DIR"
}
# register the cleanup function to be called on the EXIT signal
trap cleanup EXIT

# check doctl
if ! command_exists doctl; then
    echo "Please install doctl: https://github.com/digitalocean/doctl"
    exit 1
fi

# check kubectl
if ! command_exists kubectl; then
    echo "Please install kubectl: https://kubernetes.io/docs/tasks/tools/install-kubectl/"
    exit 1
fi

KUBECTL_FLAGS="--kubeconfig $(pwd)/admin.${TAG_PREFIX}.conf"
KUBECTL="kubectl ${KUBECTL_FLAGS}"

DOCTL_FLAGS="-u ${API_ENDPOINT}"
DOCTL="doctl ${DOCTL_FLAGS}"

# generate k8s specific ssh keys
if [ ! -f ~/.ssh/k8s/id_rsa ]; then
    mkdir -p ~/.ssh/k8s/
    ssh-keygen -t rsa -b 4096 -C "k8s" -f ~/.ssh/k8s/id_rsa -N '' > /dev/null

    # import the new ssh key
    ${DOCTL} compute ssh-key import k8s-ssh --public-key-file ~/.ssh/k8s/id_rsa.pub
fi

SSH_ID=$(${DOCTL} compute ssh-key list --format ID,Name --no-header | grep "k8s-ssh" | cut -d' ' -f1)
SSH_KEY=$(${DOCTL} compute ssh-key get "${SSH_ID}" --format FingerPrint --no-header)

# create tags
${DOCTL} compute tag create "${TAG_PREFIX}"-master > /dev/null
${DOCTL} compute tag create "${TAG_PREFIX}"-node > /dev/null

# Generate token and insert into the script files
TOKEN6=$(env LC_CTYPE=C tr -dc 'a-z0-9' < /dev/urandom | fold -w "${1:-6}" | head -n 1)
TOKEN16=$(env LC_CTYPE=C tr -dc 'a-z0-9' < /dev/urandom | fold -w "${1:-16}" | head -n 1)
TOKEN="${TOKEN6}"."${TOKEN16}"

# update the master.sh/node.sh with TOKEN
sed -e "s/^TOKEN=.*/TOKEN=${TOKEN}/; s/^DIGITALOCEAN_ACCESS_TOKEN=.*/DIGITALOCEAN_ACCESS_TOKEN=${DIGITALOCEAN_ACCESS_TOKEN}/" "${DIR}"/templates/master.sh.template > "${TEMP_DIR}"/master.sh
sed -e "s/^TOKEN=.*/TOKEN=${TOKEN}/" "${DIR}"/templates/node.sh.template > "${TEMP_DIR}"/node.sh
echo "- Creating the ${MASTER_NAME}"

# create the master
${DOCTL} compute droplet create "${MASTER_NAME}" \
    --region "${REGION}" \
    --image ubuntu-18-04-x64 \
    --size "${MASTER_SIZE}" \
    --tag-name "${TAG_PREFIX}"-master \
    --ssh-keys "${SSH_KEY}" \
    --enable-private-networking \
    --enable-monitoring \
    --user-data-file "${TEMP_DIR}"/master.sh \
    --wait > /dev/null

# get the public/private ips of the master
MASTER_ID=$(${DOCTL} compute droplet list "${MASTER_NAME}" --format=ID --tag-name "${TAG_PREFIX}"-master --no-header)
PUBLIC_IP=$(${DOCTL} compute droplet get "${MASTER_ID}" --format PublicIPv4 --no-header)
PRIVATE_IP=$(${DOCTL} compute droplet get "${MASTER_ID}" --format PrivateIPv4 --no-header)

echo "- Waiting master to finish installation"
# wait till we get admin.conf
while ! scp -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ~/.ssh/k8s/id_rsa root@"${PUBLIC_IP}":/etc/kubernetes/admin.conf admin."${TAG_PREFIX}".conf 2> /dev/null; do
    sleep 10
done

# update the node.sh with MASTER_IP
sed -i.bak "s/^MASTER_IP=.*/MASTER_IP=${PRIVATE_IP}/" "${TEMP_DIR}"/node.sh

echo "- Creating nodes"

nodes=()
for i in $(seq "${NODE_COUNT}"); do
    nodes+=("${NODE_NAME}""$i")
done

# join the nodes to the cluster
${DOCTL} compute droplet create "${nodes[@]}" \
    --region "${REGION}" \
    --image ubuntu-18-04-x64 \
    --size "${NODE_SIZE}" \
    --tag-name "${TAG_PREFIX}"-node \
    --ssh-keys "${SSH_KEY}" \
    --enable-private-networking \
    --enable-monitoring \
    --user-data-file "${TEMP_DIR}"/node.sh \
    --wait > /dev/null

echo "- Waiting nodes to be ready"
# wait till nodes are ready
until [ "$(${KUBECTL} get nodes 2> /dev/null | grep -v master | grep -c Ready | xargs)" == "${NODE_COUNT}" ]
do
    sleep 10
done
${KUBECTL} wait --for=condition=Ready node -l dok8su/role=node --timeout=600s > /dev/null

echo "- Deploying manifests"
${KUBECTL} create -f manifests/metrics-server > /dev/null

${KUBECTL} create namespace monitoring > /dev/null
${KUBECTL} create -n monitoring -f manifests/prometheus > /dev/null
${KUBECTL} create -n monitoring -f manifests/node-exporter > /dev/null
${KUBECTL} create -n monitoring -f manifests/grafana/ > /dev/null

# set dashboard access to admin
cat <<EOF | ${KUBECTL} create -f - > /dev/null
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dok8su-admin
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: dok8su-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: dok8su-admin
  namespace: kube-system
EOF

echo "- Waiting load-balancers to be ready"
PROMPORT=$(${KUBECTL} -n monitoring get svc -o 'go-template={{range .items}}{{range.spec.ports}}{{if and (.nodePort) (eq .targetPort 9090.0)}}{{.nodePort}}{{"\n"}}{{end}}{{end}}{{end}}')
GRAFPORT=$(${KUBECTL} -n monitoring get svc -o 'go-template={{range .items}}{{range.spec.ports}}{{if and (.nodePort) (eq .targetPort 3000.0)}}{{.nodePort}}{{"\n"}}{{end}}{{end}}{{end}}')

PROMLB=$(doctl compute load-balancer list | grep active | grep "protocol:tcp,port:${PROMPORT}" | cut -d' ' -f1)
until [ ! -z "${PROMLB}" ]
do
    sleep 10
    PROMLB=$(doctl compute load-balancer list | grep active | grep "protocol:tcp,port:${PROMPORT}" | cut -d' ' -f1)
done


GRAFLB=$(doctl compute load-balancer list | grep active | grep "protocol:tcp,port:${GRAFPORT}" | cut -d' ' -f1)
until [ ! -z "${GRAFLB}" ]
do
    sleep 10
    GRAFLB=$(doctl compute load-balancer list | grep active | grep "protocol:tcp,port:${GRAFPORT}" | cut -d' ' -f1)
done

echo "- Creating the master firewall"
${DOCTL} compute firewall create \
    --name "${TAG_PREFIX}"-master \
    --inbound-rules "protocol:icmp,tag:${TAG_PREFIX}-master,tag:${TAG_PREFIX}-node protocol:tcp,ports:all,tag:${TAG_PREFIX}-node protocol:udp,ports:all,tag:${TAG_PREFIX}-node protocol:tcp,ports:22,address:0.0.0.0/0,address:::/0 protocol:tcp,ports:443,address:0.0.0.0/0,address:::/0" \
    --outbound-rules "protocol:icmp,address:0.0.0.0/0,address:::/0 protocol:tcp,ports:all,address:0.0.0.0/0,address:::/0 protocol:udp,ports:all,address:0.0.0.0/0,address:::/0" \
    --tag-names "${TAG_PREFIX}"-master > /dev/null


echo "- Creating the node firewall"
${DOCTL} compute firewall create \
    --name "${TAG_PREFIX}"-nodes \
    --inbound-rules "protocol:icmp,tag:${TAG_PREFIX}-master,tag:${TAG_PREFIX}-node protocol:tcp,ports:all,tag:${TAG_PREFIX}-master protocol:udp,ports:all,tag:${TAG_PREFIX}-master protocol:tcp,ports:all,tag:${TAG_PREFIX}-node protocol:udp,ports:all,tag:${TAG_PREFIX}-node protocol:tcp,ports:22,address:0.0.0.0/0,address:::/0 protocol:tcp,ports:${PROMPORT},load_balancer_uid:${PROMLB} protocol:tcp,ports:${GRAFPORT},load_balancer_uid:${GRAFLB}" \
    --outbound-rules "protocol:icmp,address:0.0.0.0/0,address:::/0 protocol:tcp,ports:all,address:0.0.0.0/0,address:::/0 protocol:udp,ports:all,address:0.0.0.0/0,address:::/0" \
    --tag-names "${TAG_PREFIX}"-node > /dev/null

echo "- Installation completed (took $SECONDS seconds)"

echo "- To learn your dashboard token, please run;"
echo "    ${KUBECTL} -n kube-system describe secret $(${KUBECTL} -n kube-system get secret | grep dok8su-admin | awk '{print $1}')"
